name: Deploy database migration
on:
  pull_request:
    paths:
      - "packages/layers/prisma/nodejs/**"
      - "!packages/layers/prisma/nodejs/.gitignore"
    types: [ opened, reopened, edited, closed, synchronize ]

# env:
#   STACK_NAME: LC
#   STAGE: ${{ inputs.stage }}
#   NODE_OPTIONS: '--max_old_space_size=4096'
#   REPLICATION_REGIONS: 'ap-southeast-1,us-west-2,eu-west-1'
#   COGNITO_SES_REPLY_TO_EMAIL: 'linearitycloudtest@gmail.com'
#   COGNITO_SES_SENDER_EMAIL: 'linearitycloudtest@gmail.com'
#   AMPLITUDE_API_KEY: ${{ secrets.AMPLITUDE_API_KEY }}
#   AMPLITUDE_API_SECRET: ${{ secrets.AMPLITUDE_API_SECRET }}
#   AMPLITUDE_BASE_URL: ${{ secrets.AMPLITUDE_BASE_URL }}
#   APPLE_APP_AUTH_KEY: ${{ secrets.APPLE_APP_AUTH_KEY }}
#   APPLE_APP_CLIENT_ID: ${{ secrets.APPLE_APP_CLIENT_ID }}
#   APPLE_APP_KEY_ID: ${{ secrets.APPLE_APP_KEY_ID }}
#   APPLE_APP_TEAM_ID: ${{ secrets.APPLE_APP_TEAM_ID }}
#   AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
#   RESOURCE_REGION: 'eu-west-1'
#   AWS_REGION: 'eu-west-1'
#   AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
#   FACEBOOK_APP_ID: ${{ secrets.FACEBOOK_APP_ID }}
#   FACEBOOK_APP_SECRET: ${{ secrets.FACEBOOK_APP_SECRET }}
#   GOOGLE_APP_ID: ${{ secrets.GOOGLE_APP_ID }}
#   GOOGLE_APP_SECRET: ${{ secrets.GOOGLE_APP_SECRET }}
#   HOSTED_ZONE_ID: ${{ secrets.HOSTED_ZONE_ID }}
#   STACKS_OWNER: 'devops'
#   DATABASE_URL: ""

jobs:
  discovery:
    name: Define Env
    runs-on: ubuntu-latest
    outputs:
      env: ${{ steps.discovery.outputs.env }}
    steps:
      - id: discovery
        run: |
          if [ '${{ github.base_ref }}' == 'develop' ]; then
            env="DEV"
          fi
          if [ '${{ github.base_ref }}' == 'staging' ]; then
            if [ '${{ github.event_name }}' == 'pull_request' ] || [ '${{ github.event_name }}' == 'push' ]; then
              env='STG'
            fi
          fi
          if [ '${{ github.base_ref }}' == 'main' ]; then
            if [ '${{ github.event_name }}' == 'pull_request' ] || [ '${{ github.event_name }}' == 'push' ]; then
              env='PRD'
            fi
          fi
          echo "env=$env" >> $GITHUB_OUTPUT

  dryrun-db-migration:
    name: Dryrun Database migration
    if: ${{ (github.event.action == 'reopened') || (github.event.action == 'opened') || (github.event.action == 'edited') || (github.event.action == 'synchronize') }}
    needs: discovery
    runs-on: ubuntu-latest
    environment: ${{ needs.discovery.outputs.env }}

    steps:
      - name: Check out repository code
        uses: actions/checkout@v3

      - id: install-aws-cli
        uses: unfor19/install-aws-cli-action@v1
        with:
          version: 2

      - name: Backup Dev database
        env:
          AWS_PAGER: ""
        run: |
          export AWS_DEFAULT_REGION="eu-west-1"
          export AWS_ACCESS_KEY_ID=${{ secrets.AWS_ACCESS_KEY_ID }}
          export AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_SECRET_ACCESS_KEY }}
          export commit_id=$(git rev-parse HEAD)
          if [ ${{ needs.discovery.outputs.env }} = "DEV" ]
          then
            export cluster_id="lc-dev-resource-cluster"
          fi
          aws sts get-caller-identity

  deploy-db-migration:
    name: Deploy Database migration
    if: github.event.pull_request.merged == true
    needs: discovery
    runs-on: ubuntu-latest
    environment: ${{ needs.discovery.outputs.env }}
    strategy:
      matrix:
        node-version: [16.x]

    steps:
      - name: Check out repository code
        uses: actions/checkout@v3

      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node-version }}

      - name: Build
        run: |
            yarn install
            yarn ci

      - id: install-aws-cli
        uses: unfor19/install-aws-cli-action@v1
        with:
          version: 2

      - name: Backup Dev database
        run: |
          export AWS_DEFAULT_REGION="eu-west-1"
          export AWS_ACCESS_KEY_ID=${{ secrets.AWS_ACCESS_KEY_ID }}
          export AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_SECRET_ACCESS_KEY }}
          export commit_id=$(git rev-parse HEAD)
          if [ ${{ needs.discovery.outputs.env }} = "DEV" ]
          then
            export cluster_id="lc-dev-resource-cluster"
          fi

          aws rds create-db-cluster-snapshot \
              --db-cluster-identifier "${cluster_id}" \
              --db-cluster-snapshot-identifier "${commit_id}"

          st=""
          while [ "$st" != "available" ];
          do
              echo "Checking..."
              sleep 5
              st=$(aws rds describe-db-cluster-snapshots --db-cluster-identifier "${cluster_id}" --db-cluster-snapshot-identifier "${commit_id}" --query "DBClusterSnapshots[0].Status" --output text)
          done

      # - name: Run DB migrations
      #   shell: bash
      #   if: ${{ steps.filter.outputs.migration == 'true' }}
      #   env:
      #     DATABASE_URL: ${{ env.DATABASE_URL }}
      #   run: |
      #     yarn prisma:deploy
      
      # - name: Use Node.js ${{ matrix.node-version }}
      #   run: |
      #       AWS_REGION=eu-central-1 AWS_DEFAULT_REGION=eu-central-1 ENV_PATH=manhp.env AWS_PROFILE=manhp-lincloud yarn run deploy:cross-region --context initialDeploy=true
      #       AWS_REGION=eu-central-1 AWS_DEFAULT_REGION=eu-central-1 ENV_PATH=manhp.env AWS_PROFILE=manhp-lincloud yarn run deploy:cross-region --context initialDeploy=false
      #       AWS_REGION=eu-central-1 AWS_DEFAULT_REGION=eu-central-1 ENV_PATH=manhp.env AWS_PROFILE=manhp-lincloud yarn run deploy:resource
      #       AWS_REGION=eu-central-1 AWS_DEFAULT_REGION=eu-central-1 ENV_PATH=manhp.env AWS_PROFILE=manhp-lincloud yarn run deploy:app
      #       AWS_REGION=eu-central-1 AWS_DEFAULT_REGION=eu-central-1 ENV_PATH=manhp.env AWS_PROFILE=manhp-lincloud yarn run deploy:migrate-db
