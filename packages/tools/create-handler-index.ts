/* eslint-disable no-console, @typescript-eslint/no-unsafe-argument, @typescript-eslint/no-floating-promises */
import path from 'path'
import fs from 'fs'

const excludes = ['auth', 'webhook']
const packagesDir = path.resolve(__dirname, '..')
const functionsDir = path.join(packagesDir, 'functions')
const functions = fs.readdirSync(functionsDir).filter((f) => fs.lstatSync(path.join(functionsDir, f)).isDirectory())
const handlerFiles = functions.reduce<string[]>((carry, f) => {
  if (excludes.includes(f)) {
    return carry
  }
  const handlerFile = path.join(functionsDir, f, 'handlers.ts')
  if (fs.existsSync(handlerFile)) {
    carry.push(handlerFile)
  }
  return carry
}, [])
const indexFiles = handlerFiles.map((f) => f.replace('handlers.ts', 'index.ts'))

const indexFileHeader = `/**
 * This file is auto-generated by create-handler-index.ts.
 * Do not modify it manually.
 *
 * @generated
 * @author Luc <luc@ltv.vn>
 * */

import { createHttpHandler } from '@layers/core/lib/http-handler'
import * as handlers from './handlers'`
const exportFunctionTemplate = `export const {{functionName}} = createHttpHandler(handlers.{{handler}})`

const generateIndexFileContent = (handlers: string[]) => {
  const exportFunctions = handlers
    .map((h) =>
      exportFunctionTemplate
        .replace('{{functionName}}', h.replace(/((Handler)|(handler))$/g, ''))
        .replace('{{handler}}', h),
    )
    .join('\n')
  return `${indexFileHeader}

${exportFunctions}
`
}

const writeFile = async (file: string, content: string) => fs.promises.writeFile(file, content, 'utf8')

const generate = async () =>
  Promise.resolve(console.log(`Generating functions' index files...`))
    .then(async () => Promise.all(handlerFiles.map(async (f) => import(f))))
    .then((files) => files.map((h) => Object.keys(h)))
    .then((files) => files.map(async (h, idx) => writeFile(indexFiles[idx], generateIndexFileContent(h))))

generate().then(() => console.log('>> Done!'))
